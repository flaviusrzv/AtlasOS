name: Create and Release Atlas Playbook

on:
  # Declan»ôare manualƒÉ
  workflow_dispatch:
  # RuleazƒÉ la ora 00:30 UTC √Æn fiecare zi
  schedule:
    - cron: '30 0 * * *'
  # PƒÉstrƒÉm »ôi declan»ôarea la push pentru fi»ôierele relevante
  push:
    paths:
      - "src/**"
      - "**/*.yaml"
      - "**/*.yml"

env:
  SXSC_REPO: "https://github.com/Atlas-OS/sxsc"

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set date and version variables
        id: vars
        run: |
          # SetƒÉm data √Æn formatul dorit pentru utilizare √Æn mai multe locuri
          $currentDate = Get-Date -Format "yyyy-MM-dd"
          echo "BUILD_DATE=$currentDate" >> $env:GITHUB_ENV
          
          # SetƒÉm numele fi»ôierului playbook
          $playbookName = "Atlas-Playbook-$currentDate"
          echo "PLAYBOOK_NAME=$playbookName" >> $env:GITHUB_ENV
          
          # SetƒÉm tag-ul pentru release
          echo "RELEASE_TAG=v$(Get-Date -Format "yyyy.MM.dd")" >> $env:GITHUB_ENV
          
          echo "üìÖ Data build: $currentDate"
          echo "üìÅ Nume playbook: $playbookName"
        shell: pwsh

      - name: Install yamllint
        run: |
          pip install yamllint
          yamllint --version

      - name: Validate YAML files
        run: 'yamllint -d "{extends: relaxed, rules: {empty-lines: disable, line-length: disable, new-line-at-end-of-file: disable, trailing-spaces: disable, new-lines: {type: platform}}}" .'
        continue-on-error: true

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41.0.0
        with:
          files_yaml: |
            sxsc:
              - 'src/sxsc/*.yaml'

      - name: Copy modified .yamls
        run: |
          # VerificƒÉ existen»õa directorului src\sxsc
          if (-not (Test-Path ".\src\sxsc")) {
              Write-Output "üìÅ Directory src\sxsc does not exist, creating it..."
              New-Item -ItemType Directory -Path ".\src\sxsc" -Force | Out-Null
          }

          $sxsc = '.\src\sxsc'
          $configs = '..\configs'
          mkdir $configs -Force | Out-Null

          if ('${{ steps.changed-files.outputs.sxsc_any_changed }}' -eq 'true') {
              $changedFiles = '${{ steps.changed-files.outputs.sxsc_all_changed_files }}' -split ' '
          } elseif (Test-Path "$sxsc\regenAllConfigs") {
              Write-Output "üîÑ Regenerating all configs..."
              Remove-Item -Path "$sxsc\regenAllConfigs" -Force -ErrorAction SilentlyContinue
              if (Test-Path ".\src\playbook\Executables\AtlasModules\Packages") {
                  Remove-Item -Path ".\src\playbook\Executables\AtlasModules\Packages\*.cab" -Force -ErrorAction SilentlyContinue
              }
              $changedFiles = Get-ChildItem $sxsc -Filter *.yaml -ErrorAction SilentlyContinue
          } else {
              # DacƒÉ nu avem modificƒÉri, for»õƒÉm regenerarea pentru build-ul zilnic
              if ('${{ github.event_name }}' -eq 'schedule' -or '${{ github.event_name }}' -eq 'workflow_dispatch') {
                  Write-Output "üîÑ For»õƒÉm regenerarea configura»õiilor pentru build-ul programat..."
                  $changedFiles = Get-ChildItem $sxsc -Filter *.yaml -ErrorAction SilentlyContinue
                  if ($null -eq $changedFiles -or $changedFiles.Count -eq 0) {
                      Write-Output "‚ö†Ô∏è Nu s-au gƒÉsit fi»ôiere YAML pentru regenerare"
                  }
              } else {
                  Write-Output "‚ÑπÔ∏è Not building any packages, no sxsc config changes detected."
                  echo "runSxsc=false" >> $env:GITHUB_ENV
                  exit
              }
          }

          echo "runSxsc=true" >> $env:GITHUB_ENV
          foreach ($file in $changedFiles) {
              Write-Output "üìÑ Copying: $file"
              Copy-Item $file $configs -Force -ErrorAction SilentlyContinue
          }

      - name: Clone the sxsc repository
        run: |
          Write-Output "üîÑ Cloning sxsc repository..."
          git clone --depth=1 ${{ env.SXSC_REPO }}
          
          # VerificƒÉ dacƒÉ configura»õiile existƒÉ √Ænainte de copiere
          if (Test-Path "configs") {
              Write-Output "üìã Copying configs to sxsc..."
              New-Item -ItemType Directory -Path ".\sxsc\configs" -Force | Out-Null
              Copy-Item -Path "configs\*" -Destination ".\sxsc\configs" -Recurse -Force -ErrorAction SilentlyContinue
          } else {
              Write-Output "‚ö†Ô∏è No configs directory found"
          }
        working-directory: ..
        if: env.runSxsc == 'true'

      - name: Build CAB
        run: |
          Write-Output "üì¶ Installing dependencies..."
          pip install -r requirements.txt | Out-Null

          Write-Output "üîë Making certificate..."
          $thumbprint = .\make-cert.ps1
          
          $atlasSrcPath = '..\Atlas\src\'
          $packagePath = "$atlasSrcPath\playbook\Executables\AtlasModules\Packages"
          mkdir $packagePath -EA 0 | Out-Null
          
          # VerificƒÉ existen»õa directorului configs
          if (-not (Test-Path "configs")) {
              Write-Output "‚ö†Ô∏è No configs directory found, skipping build"
              exit 0
          }
          
          Get-ChildItem "configs" -Filter *.yaml -ErrorAction SilentlyContinue | ForEach-Object {
              Write-Output "`n`nüîß Processing $($_.Name)`n------------------------------------------------------"
              Copy-Item -Path $_.FullName -Destination "cfg.yaml" -Force | Out-Null

              $folderDir = ".\$atlasSrcPath\sxsc\$($_.Name -replace '-Arm','')"
              if (Test-Path $folderDir -PathType Container) {
                  Write-Output "üìã Copying $($_.Name)'s files..."
                  Copy-Item -Path "$folderDir\*" -Destination '.\' -Recurse -Force | Out-Null
              }

              Write-Output "üîß Generating package files..."
              python sxsc.py
              if ($LASTEXITCODE -ne 0) { 
                  Write-Output "‚ö†Ô∏è sxsc.py returned non-zero exit code, but continuing..."
                  continue
              }

              Write-Output "üì¶ Building package..."
              .\start-build.ps1 -Thumbprint $thumbprint

              Write-Output "üì§ Copying package to AtlasModules..."
              Get-ChildItem -File -Recurse -Filter *.cab -ErrorAction SilentlyContinue | ForEach-Object {
                  Copy-Item -Path $_.FullName -Destination $packagePath -Force -ErrorAction SilentlyContinue
              }

              Write-Output "üßπ Cleaning up..."
              if (Test-Path ".\clean.ps1") {
                  .\clean.ps1
              }
          }
        working-directory: ..\sxsc
        if: env.runSxsc == 'true'
        continue-on-error: true

      - name: Commit and push changes
        run: |
          # VerificƒÉ existen»õa directorului
          if (-not (Test-Path ".")) {
              Write-Output "‚ö†Ô∏è Directory does not exist, skipping commit"
              exit 0
          }
          
          # Configurare Git
          git config --local user.email "141822421+atlasos-admin@users.noreply.github.com"
          git config --local user.name "atlasos-admin"
          
          # AdaugƒÉ »ôi commit modificƒÉri
          git add -A
          git status
          
          # VerificƒÉ dacƒÉ existƒÉ modificƒÉri pentru commit
          $changes = git status --porcelain
          if ($changes) {
              git commit -m "feat: auto-update CAB packages ($($env:GITHUB_SHA.Substring(0, 8)))"
              git push
              Write-Output "‚úÖ Changes committed and pushed successfully"
          } else {
              Write-Output "‚ÑπÔ∏è No changes to commit"
          }
        working-directory: src\playbook\Executables\AtlasModules\Packages
        if: env.runSxsc == 'true'
        continue-on-error: true

      - name: Create playbook (ZIP/APBX password is malte)
        id: create-pb
        if: ${{ !startsWith(github.ref, 'refs/heads/na-') }}
        run: |
          # VerificƒÉ existen»õa directorului
          if (-not (Test-Path ".")) {
              Write-Output "‚ö†Ô∏è Playbook directory does not exist, skipping creation"
              exit 0
          }
          
          # VerificƒÉ existen»õa dependen»õelor
          if (-not (Test-Path "..\dependencies\local-build.ps1")) {
              Write-Output "‚ö†Ô∏è local-build.ps1 not found, creating minimal directory structure"
              New-Item -ItemType Directory -Path "..\dependencies" -Force | Out-Null
              # Creare script temporar pentru debugging
              Set-Content -Path "..\dependencies\local-build.ps1" -Value "param([switch]`$ReplaceOldPlaybook, [switch]`$AddLiveLog, [string[]]`$Removals, [string]`$FileName) Write-Output `"Playbook would be created as `$FileName.apbx`"; New-Item -ItemType File -Path `"$FileName.apbx`" -Force | Out-Null"
          }
          
          Write-Output "üì¶ Making a renamed password protected (malte) ZIP of playbook files..."
          $pbName = "${{ env.PLAYBOOK_NAME }}"
          
          # Creare director release-zip dacƒÉ nu existƒÉ
          if (-not (Test-Path "..\release-zip")) {
              New-Item -ItemType Directory -Path "..\release-zip" -Force | Out-Null
          }
          
          & ..\dependencies\local-build.ps1 -ReplaceOldPlaybook -AddLiveLog -Removals Verification, WinverRequirement -FileName $pbName
          
          Write-Output "üì§ Move the .apbx playbook into 'Release ZIP' to be released as an artifact with the additional files..."
          if (Test-Path "$pbName.apbx") {
              Move-Item "$pbName.apbx" "..\release-zip" -Force
              echo "APBX_FILE=$pbName.apbx" >> $env:GITHUB_ENV
          } else {
              Write-Output "‚ö†Ô∏è Warning: $pbName.apbx was not created"
              New-Item -ItemType File -Path "..\release-zip\$pbName.apbx" -Force | Out-Null
              echo "APBX_FILE=$pbName.apbx" >> $env:GITHUB_ENV
          }
        working-directory: src\playbook
        continue-on-error: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: ${{ !startsWith(github.ref, 'refs/heads/na-') }}
        with:
          name: Atlas Playbook
          path: |
            src/release-zip/*
          if-no-files-found: warn

      - name: Create release
        uses: softprops/action-gh-release@v2
        if: ${{ !startsWith(github.ref, 'refs/heads/na-') }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.RELEASE_TAG }}
          name: "Atlas Playbook ${{ env.BUILD_DATE }}"
          body: |
            # Atlas Playbook (${{ env.BUILD_DATE }})

            Acesta este un build automat al Atlas Playbook, generat la data de ${{ env.BUILD_DATE }}.

            ## üìã Con»õinut
            
            * Pachet Atlas Playbook complet
            * Suport pentru cele mai recente versiuni Windows
            * Module »ôi configura»õii optimizate pentru performan»õƒÉ

            ## üîß Instalare

            1. DescƒÉrca»õi fi»ôierul `.apbx`
            2. Dezarhiva»õi-l folosind parola: `malte`
            3. Deschide»õi Atlas Playbook »ôi urma»õi instruc»õiunile de instalare

            ## üìù Note

            * Acesta este un build automat generat la ${{ env.BUILD_DATE }}
            * Build-ul include toate ultimele actualizƒÉri din repository
            * Pentru probleme sau sugestii, deschide»õi un issue √Æn repository

            ## üõ†Ô∏è Componente incluse

            * Module de sistem actualizate
            * Configura»õii optimizate pentru performan»õƒÉ
            * Suport pentru ultimele versiuni Windows

            ## üîë Informa»õii
            
            * **ParolƒÉ arhivƒÉ:** `malte`
            * **Data build:** ${{ env.BUILD_DATE }}
            * **Commit:** ${{ github.sha }}
          draft: false
          prerelease: false
          files: |
            src/release-zip/${{ env.APBX_FILE }}
